@page "/createreport"

@rendermode InteractiveServer

@using LocalEyes.Services
@using LocalEyes.Shared.Models
@using Microsoft.AspNetCore.Components.Authorization
@using System.Globalization

@inject ReportService ReportService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<h3>Create Report</h3>

<br />

<EditForm Model="report" OnValidSubmit="SaveReport">

    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="col-md-12">

        <div class="col-md-6">

            <div class="form-fields">

                <label>Type</label>

                <InputSelect @bind-Value="report.TypeId" class="form-control">

                    <option value="">Select a type</option>

                    @foreach (var type in types)
                    {
                        <option value="@type.Id">@type.Name</option>
                    }

                </InputSelect>

            </div>

            <div class="form-fields">

                <label>Comment</label>
                <InputText @bind-Value="report.Comment" class="form-control" />

            </div>

            <p style="margin-top: 20px;">Set a marker on the map to automatically get the coordinates or input them manually</p>

            <div class="form-fields">

                <label>Latitude</label>
                <InputText @bind-Value="report.Latitude" id="latitudeInput" class="form-control" />

            </div>

            <div class="form-fields">

                <label>Longitude</label>
                <InputText @bind-Value="report.Longitude" id="longitudeInput" class="form-control" />

            </div>

            <div id="map" style="height: 340px; width: 100%; margin: 30px 0 10px 0;"></div>

        </div>

    </div>

    <button type="submit" class="btn btn-primary mt-3 mb-5">Save</button>

</EditForm>

<script>

    function initializeMap(mapId, defaultLatitude, defaultLongitude) {

    const map = L.map(mapId).setView([defaultLatitude, defaultLongitude], 13);

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    maxZoom: 19
    }).addTo(map);

    let marker = L.marker([defaultLatitude, defaultLongitude]).addTo(map);

    map.on('click', function (e) {

    const { lat, lng } = e.latlng;

    if (marker) {
    marker.setLatLng(e.latlng);
    } else {
    marker = L.marker(e.latlng).addTo(map);
    }

    document.getElementById('latitudeInput').value = lat;
    document.getElementById('longitudeInput').value = lng;
    });
    }
</script>

@code {

    private Report report = new();
    private List<Shared.Models.Type> types = new();
    private bool isAdmin = false;

    private const double DefaultLatitude = 57.04705499214535; // Aalborg
    private const double DefaultLongitude = 9.92168426513672; // Aalborg

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        types = await ReportService.GetTypesAsync();

        report.Latitude = DefaultLatitude.ToString(CultureInfo.InvariantCulture);
        report.Longitude = DefaultLongitude.ToString(CultureInfo.InvariantCulture);
        report.Priority = 3; // Default priority

        var authState = await AuthenticationStateTask;
        var user = authState.User;

        isAdmin = user.IsInRole("Administrator");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeMap", "map", DefaultLatitude, DefaultLongitude);
        }
    }

    private async Task SaveReport()
    {
        var authState = await AuthenticationStateTask;
        var user = authState.User;

        var userIdClaim = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier);

        if (userIdClaim == null || !Guid.TryParse(userIdClaim.Value, out var userId))
        {
            throw new InvalidOperationException("Unable to retrieve the logged-in user's ID.");
        }

        report.Id = Guid.NewGuid();
        report.CreatedDate = DateTime.UtcNow;
        report.ModifiedDate = DateTime.UtcNow;
        report.ModifedBy = user.Identity?.Name ?? "";

        var userReport = new UserReport
        {
            Id = Guid.NewGuid(),
            UserId = userId,
            ReportId = report.Id
        };

        string stop = "";

        await ReportService.CreateReport(report, userReport);

        Navigation.NavigateTo("/reports");
    }
}
