@page "/editreport"
@page "/editreport/{ReportId:guid}"

@rendermode InteractiveServer

@using LocalEyes.Services
@using LocalEyes.Shared.Models
@using System.Diagnostics
@using Microsoft.AspNetCore.Components.Authorization
@using System.Globalization

@inject ReportService ReportService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<h3>@(IsNewReport ? "Create report" : "Edit report")</h3>

<br />

<EditForm Model="report" OnValidSubmit="SaveReport">

    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="col-md-12">

        

        <div class=" col-md-6">

            <div class="form-fields">

                <label>Type</label>

                <InputSelect @bind-Value="report.TypeId" class="form-control">

                    <option value="">Select a type</option>

                    @foreach (var type in types)
                    {
                        <option value="@type.Id">@type.Name</option>
                    }

                </InputSelect>

            </div>

            <div class="form-fields">

                <label>Comment</label>
                <InputText @bind-Value="report.Comment" class="form-control" />

            </div>

            @if (isAdmin)
            {
                <div class="form-fields">

                    <label>Priority</label>
                    <InputNumber @bind-Value="report.Priority" class="form-control" />

                </div>
            }

            <p style="margin-top: 20px;">Set a marker on the map to automatically get the coordinates or input them manually</p>

            <div class="form-fields">

                <label>Latitude</label>
                <InputText @bind-Value="report.Latitude" id="latitudeInput" class="form-control" />

            </div>

            <div class="form-fields">

                <label>Longitude</label>
                <InputText @bind-Value="report.Longitude" id="longitudeInput" class="form-control" />

            </div>

            <div id="map" style="height: 340px; width: 100%; margin: 30px 0 10px 0;"></div>


        </div>

        <div class=" col-md-6">
        </div>

    </div>

    
    <button type="submit" class="btn btn-primary mt-3 mb-5">Save</button>

</EditForm>

<script>

    function initializeEditableMap(mapId, latitude, longitude, defaultLatitude, defaultLongitude) {

        try {
            console.log("Initializing map...");
            console.log("Map ID:", mapId);
            console.log("Latitude received:", latitude);
            console.log("Longitude received:", longitude);

            const mapLatitude = latitude || defaultLatitude;
            const mapLongitude = longitude || defaultLongitude;

            console.log("Using Latitude:", mapLatitude);
            console.log("Using Longitude:", mapLongitude);

            const map = L.map(mapId).setView([mapLatitude, mapLongitude], 13);

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                maxZoom: 19
            }).addTo(map);

            let marker = L.marker([mapLatitude, mapLongitude]).addTo(map);

            map.on('click', function (e) {
                let { lat, lng } = e.latlng;

                console.log("Marker clicked. New Latitude:", lat, "New Longitude:", lng);

                if (marker) {
                    marker.setLatLng(e.latlng);
                } else {
                    marker = L.marker(e.latlng).addTo(map);
                }

                document.getElementById('latitudeInput').value = lat;
                document.getElementById('longitudeInput').value = lng;
            });

                console.log("Map initialized successfully.");

            } catch (error) {
                console.error("Error initializing map:", error);
            }
    }

</script>

@code {

    [Parameter]
    public Guid? ReportId { get; set; }

    private Report report = new();
    private bool IsNewReport => !ReportId.HasValue;
    private List<Shared.Models.Type> types = new();
    private bool isAdmin = false;

    private const double DefaultLatitude = 57.04705499214535; // Aalborg
    private const double DefaultLongitude = 9.92168426513672; // Aalborg

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        types = await ReportService.GetTypesAsync();

        if (!IsNewReport)
        {
            report = await ReportService.GetReportByIdAsync(ReportId.Value);
        }
        else
        {
            report.Latitude = DefaultLatitude.ToString();
            report.Longitude = DefaultLongitude.ToString();
            report.Priority = 3; // Default value
        }

        var authState = await AuthenticationStateTask;
        var user = authState.User;

        // foreach (var claim in user.Claims)
        // {
        //     Debug.WriteLine($"Claim Type: {claim.Type}, Claim Value: {claim.Value}");
        // }

        isAdmin = user.IsInRole("Administrator");

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Debug.WriteLine($"Initializing map with Latitude = {report.Latitude}, Longitude = {report.Longitude}");

        if (firstRender && !string.IsNullOrEmpty(report.Latitude) && !string.IsNullOrEmpty(report.Longitude))
        {
            await JSRuntime.InvokeVoidAsync("initializeEditableMap", "map", report.Latitude, report.Longitude, DefaultLatitude, DefaultLongitude);
        }
    }

    private async Task SaveReport()
    {
        if (!isAdmin)
        {
            report.Priority = 3;
        }

        var authState = await AuthenticationStateTask;
        var user = authState.User;


        report.Id = Guid.NewGuid();
        report.CreatedDate = DateTime.UtcNow;
        report.ModifiedDate = DateTime.UtcNow;
        report.ModifedBy = user.Identity?.Name ?? "";

        if (IsNewReport)
        {
            await ReportService.CreateReport(report);
        }
        else
        {
            await ReportService.UpdateReport(report);
        }

        Navigation.NavigateTo("/reports");
    }

    public void UpdateCoordinatesFromJS(string latitude, string longitude)
    {
        report.Latitude = latitude;
        report.Longitude = longitude;

        StateHasChanged();
    }
}