@page "/editmunicipality"
@page "/editmunicipality/{MunicipalityId:guid}"

@rendermode InteractiveServer

@using LocalEyes.Services
@using LocalEyes.Shared.Models
@using System.Diagnostics
@using Microsoft.AspNetCore.Components.Authorization
@using System.Globalization

@inject MunicipalityService MunicipalityService
@inject NavigationManager Navigation

@using LocalEyes.Shared.Models

<h3>@(IsNewMunicipality ? "Add municipality" : "Edit municipality")</h3>

<br />

<EditForm Model="municipality" OnValidSubmit="SaveMunicipality">

    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="col-md-12">

        <div class="col-md-3">

            <div class="form-fields">

                <label>Name</label>
                <InputText @bind-Value="municipality.Name" class="form-control" />

            </div>

            <div class="form-fields">

                <label>Zipcode</label>
                <InputText @bind-Value="municipality.Zipcode" class="form-control" />

            </div>

            <button type="submit" class="btn btn-primary mt-3 mb-5">Save</button>

        </div>

    </div>

</EditForm>

@code {

    [Parameter]
    public Guid? MunicipalityId { get; set; }

    private Municipality municipality = new();
    private bool IsNewMunicipality => !MunicipalityId.HasValue;

    protected override async Task OnInitializedAsync()
    {
        if (!IsNewMunicipality)
        {
            municipality = await MunicipalityService.GetMunicipalityByIdAsync(MunicipalityId.Value);
        }
    }

    private async Task SaveMunicipality()
    {
        if (IsNewMunicipality)
        {
            await MunicipalityService.CreateMunicipality(municipality);
        }
        else
        {
            await MunicipalityService.UpdateMunicipality(municipality);
        }

        Navigation.NavigateTo("/municipalities");
    }
}
