@page "/reports"

@using LocalEyes.Shared.Models

@inject LocalEyes.Services.ReportService ReportService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

@rendermode InteractiveServer

<PageTitle>Reports</PageTitle>

<script>

    function initializeLeafletMap(mapId, latitude, longitude) {

    const map = L.map(mapId).setView([parseFloat(latitude), parseFloat(longitude)], 13);

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    maxZoom: 19
    }).addTo(map);

    L.marker([parseFloat(latitude), parseFloat(longitude)]).addTo(map);
    }

</script>

<h1>Reports</h1>
<br />
<br />

<row>

    <div class="col-md-12" style="text-align: end">
        <button class="btn btn-primary" @onclick="() => CreateReport()">New report</button>
    </div>

    

</row>

@if (reports == null)
{
    <p>Loading...</p>
}
else if (reports.Count == 0)
{
    <p>No reports available.</p>
}
else
{
    <table class="table">

        <thead>

            <tr>
                <th>Comment</th>
                <th>Type</th>
                <th>Created Date</th>
                <th class="actions-column"></th>
            </tr>

        </thead>

        <tbody>

            @foreach (var report in reports)
            {
                <tr>
                    <td><strong>@report.Comment</strong></td>
                    <td>@report.Type?.Name</td>
                    <td>@report.CreatedDate.ToShortDateString()</td>
                    <td class="actions-column">
                        <button class="btn btn-primary" @onclick="() => EditReport(report.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteReport(report.Id)">Delete</button>
                        <button class="btn btn-primary map-btn" @onclick="() => ToggleMap(report.Id)">Map</button>
                    </td>
                </tr>
                @if (expandedRows.ContainsKey(report.Id) && expandedRows[report.Id])
                {
                    <tr class="expanded-row">

                        <td colspan="6">

                            <div>
                                <strong>Latitude:</strong> @report.Latitude
                                <br />
                                <strong>Longitude:</strong> @report.Longtitude
                                <div id="map-@report.Id" style="height: 400px; width: 100%; margin-top: 10px;"></div>

                            </div>

                        </td>

                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {

    private List<Report> reports;
    private Dictionary<Guid, bool> expandedRows = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            reports = await ReportService.GetReportsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching reports: {ex.Message}");
        }
    }


    private async Task ToggleMap(Guid reportId)
    {
        if (expandedRows.ContainsKey(reportId))
        {
            expandedRows[reportId] = !expandedRows[reportId];
        }
        else
        {
            expandedRows[reportId] = true;
        }

        await Task.Delay(50);

        if (expandedRows[reportId])
        {
            await InitializeMapAsync(reportId);
        }
    }

    private async Task InitializeMapAsync(Guid reportId)
    {
        var report = reports.FirstOrDefault(r => r.Id == reportId);

        if (report != null)
        {
            await JSRuntime.InvokeVoidAsync("initializeLeafletMap", $"map-{report.Id}", report.Latitude, report.Longtitude);
        }
    }

    private void CreateReport()
    {
        Navigation.NavigateTo("/editreport");
    }

    private void EditReport(Guid reportId)
    {
        Navigation.NavigateTo($"/editreport/{reportId}");
    }

    private async Task DeleteReport(Guid reportId)
    {
        try
        {
            //await ReportService.DeleteReportAsync(reportId);

            reports = reports.Where(r => r.Id != reportId).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting report: {ex.Message}");
        }
    }
}

